<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BZT Generated Test Plan" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WIL_CreateTrouble" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <stringProp name="ThreadGroup.start_time"></stringProp>
        <stringProp name="ThreadGroup.end_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="Cache" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookies" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">false</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="user_defined" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">soa-mp-rmsk-is01.tsl.telus.com:443</stringProp>
              <stringProp name="Authorization.username">APP_RENDEZVOUS</stringProp>
              <stringProp name="Authorization.password">soaorgid</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="appointmentEndDate" elementType="Argument">
              <stringProp name="Argument.name">appointmentEndDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P2D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="appointmentStartDate" elementType="Argument">
              <stringProp name="Argument.name">appointmentStartDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P1D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dueDate" elementType="Argument">
              <stringProp name="Argument.name">dueDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P22D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">not present</stringProp>
            </elementProp>
            <elementProp name="earlyStartDate" elementType="Argument">
              <stringProp name="Argument.name">earlyStartDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P17D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">not present</stringProp>
            </elementProp>
            <elementProp name="originatingSystemCreateDate" elementType="Argument">
              <stringProp name="Argument.name">originatingSystemCreateDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestDate" elementType="Argument">
              <stringProp name="Argument.name">requestDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counter" elementType="Argument">
              <stringProp name="Argument.name">counter</stringProp>
              <stringProp name="Argument.value">00${__Random(11000,11500,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_estimatedDuration.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_estimatedDuration.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">estimatedDuration</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_originatingSystemWoId.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_originatingSystemWoId.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">originatingSystemWoId</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_Address.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_Address.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">fmsAddressId,apartmentNumber,houseNumber,suffix,vector,street,city,provinceCode,postalCode,fmsCoid,clli,country</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_Product.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_Product.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">productCategory,productTechnology,jobType,workGroupCode</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_originatingSystemWoInternalId.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_originatingSystemWoInternalId.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">originatingSystemWoInternalId</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Action" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Iteration Start Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def ItrStartTime = new Date() 
use(groovy.time.TimeCategory) {
    vars.put(&quot;ItrStartTime&quot;, ItrStartTime.getTime() as String)
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WIL_Create_Trouble" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-dynaTrace</stringProp>
                  <stringProp name="Header.value">NA=WIL_Create_Trouble;PC=${__samplerName()};VU=-${__threadNum()};ID=${__time()}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;S:Envelope xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
&#xd;
              xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
&#xd;
              &lt;S:Header xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; /&gt;&#xd;
&#xd;
              &lt;S:Body&#xd;
&#xd;
                             xmlns:wsu=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;&#xd;
&#xd;
                             wsu:Id=&quot;id-1797998605&quot;&gt;&#xd;
&#xd;
                             &lt;ns5:createWorkOrder&#xd;
&#xd;
                                           xmlns:ns5=&quot;http://xmlschema.tmi.telus.com/srv/RMO/ProcessMgmt/FieldWorkAssignmentMgmtServiceRequestResponse_v3&quot;&#xd;
&#xd;
                                           xmlns:ns2=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/Exceptions_v3&quot;&#xd;
&#xd;
                                           xmlns:ns3=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/EnterpriseCommonTypes_v9&quot;&#xd;
&#xd;
                                           xmlns:ns4=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/types/ping_v1&quot;&gt;&#xd;
&#xd;
                                           &lt;ns5:inputHeader&gt;&#xd;
&#xd;
                                                          &lt;systemSourceCd&gt;8517&lt;/systemSourceCd&gt;&#xd;
&#xd;
                                                          &lt;userId&gt;T856407&lt;/userId&gt;&#xd;
&#xd;
                                                          &lt;requestDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/requestDate&gt;&#xd;
&#xd;
                                           &lt;/ns5:inputHeader&gt;&#xd;
&#xd;
                                           &lt;ns5:workOrder&gt;&#xd;
&#xd;
                                                         &lt;originatingSystemId&gt;3259&lt;/originatingSystemId&gt;&#xd;
&#xd;
                                                         &lt;originatingSystemWorkOrderId&gt;${__time()}&lt;/originatingSystemWorkOrderId&gt;&#xd;
&#xd;
                                                         &lt;originatingSystemWorkOrderInternalId&gt;${__time()}&lt;/originatingSystemWorkOrderInternalId&gt;&#xd;
&#xd;
                                                          &lt;classificationCd&gt;TROUBLE&lt;/classificationCd&gt;&#xd;
&#xd;
                                                          &lt;serviceClassCd&gt;R&lt;/serviceClassCd&gt;&#xd;
&#xd;
                                                         &lt;productCategoryCd&gt;${productCategory}&lt;/productCategoryCd&gt;&#xd;
&#xd;
                                                         &lt;productTechnologyCd&gt;${productTechnology}&lt;/productTechnologyCd&gt;&#xd;
&#xd;
                                                          &lt;workGroupCd&gt;${workGroupCode}&lt;/workGroupCd&gt;&#xd;
&#xd;
                                                         &lt;workOrderActionCd&gt;R&lt;/workOrderActionCd&gt;&#xd;
&#xd;
                                                          &lt;jobTypeCd&gt;${jobType}&lt;/jobTypeCd&gt;&#xd;
&#xd;
                                                          &lt;outofServiceInd&gt;true&lt;/outofServiceInd&gt;&#xd;
&#xd;
                                                         &lt;hostReadyForDispatchInd&gt;false&lt;/hostReadyForDispatchInd&gt;&#xd;
&#xd;
                                                          &lt;overrideInd&gt;false&lt;/overrideInd&gt;&#xd;
&#xd;
                                                          &lt;appointmentStartDate&gt;${__timeShift(yyyy-MM-dd,,P1D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/appointmentStartDate&gt;&#xd;
&#xd;
                                                          &lt;appointmentEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/appointmentEndDate&gt;&#xd;
&#xd;
                                                         &lt;estimatedDurationNum&gt;${estimatedDuration}&lt;/estimatedDurationNum&gt;&#xd;
&#xd;
                                                         &lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
&#xd;
                                                          &lt;location&gt;&#xd;
&#xd;
                                                                        &lt;locationList&gt;&#xd;
&#xd;
                                                                                      &lt;typeCode&gt;SERVICE&lt;/typeCode&gt;&#xd;
&#xd;
                                                                                      &lt;dispatchLocationInd&gt;true&lt;/dispatchLocationInd&gt;&#xd;
&#xd;
                                                                                      &lt;fmsAddress&gt;&#xd;
&#xd;
                                                                                                    &lt;houseNumber&gt;${houseNumber}&lt;/houseNumber&gt;&#xd;
&#xd;
                                                                                                     &lt;streetName&gt;${street}&lt;/streetName&gt;&#xd;
&#xd;
                                                                                                    &lt;cityName&gt;${city}&lt;/cityName&gt;&#xd;
&#xd;
                                                                                                    &lt;provinceCode&gt;${provinceCode}&lt;/provinceCode&gt;&#xd;
&#xd;
                                                                                                    &lt;postalCode&gt;${postalCode}&lt;/postalCode&gt;&#xd;
&#xd;
                                                                                                    &lt;fmsCoId&gt;${fmsCoid}&lt;/fmsCoId&gt;&#xd;
&#xd;
                                                                                                    &lt;countryCode&gt;${country}&lt;/countryCode&gt;&#xd;
&#xd;
                                                                                      &lt;/fmsAddress&gt;&#xd;
&#xd;
                                                                        &lt;/locationList&gt;&#xd;
&#xd;
                                                          &lt;/location&gt;&#xd;
&#xd;
                                                          &lt;customerName&gt;MANIRAHO JEAN&lt;/customerName&gt;&#xd;
&#xd;
                                                          &lt;customerRatingCd&gt;C&lt;/customerRatingCd&gt;&#xd;
&#xd;
                                                         &lt;customerTypeCd&gt;CUSTOMER&lt;/customerTypeCd&gt;&#xd;
&#xd;
                                                          &lt;contactList&gt;&#xd;
&#xd;
                                                                        &lt;name&gt;Jean&lt;/name&gt;&#xd;
&#xd;
                                                                        &lt;typeCd&gt;CBR&lt;/typeCd&gt;&#xd;
&#xd;
                                                                        &lt;phoneNumber&gt;7807297761&lt;/phoneNumber&gt;&#xd;
&#xd;
                                                                        &lt;phoneLocationCd&gt;AUT&lt;/phoneLocationCd&gt;&#xd;
&#xd;
                                                          &lt;/contactList&gt;&#xd;
&#xd;
                                                          &lt;originatingSystemCreateDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&#xd;
&#xd;
                                                          &lt;/originatingSystemCreateDate&gt;&#xd;
&#xd;
                                                          &lt;workOrderAttributeList&gt;&#xd;
&#xd;
                                                                        &lt;typeCode&gt;&#xd;
&#xd;
                                                                                      &lt;typeCd&gt;NOTIFICATION_IND&lt;/typeCd&gt;&#xd;
&#xd;
                                                                                      &lt;descriptionTxt&gt;false&lt;/descriptionTxt&gt;&#xd;
&#xd;
                                                                        &lt;/typeCode&gt;&#xd;
&#xd;
                                                          &lt;/workOrderAttributeList&gt;&#xd;
&#xd;
                                                          &lt;remarkList&gt;&#xd;
&#xd;
                                                                        &lt;typeCode&gt;&#xd;
&#xd;
                                                                                      &lt;typeCd&gt;GENERAL&lt;/typeCd&gt;&#xd;
&#xd;
                                                                                      &lt;descriptionTxt&gt;&#xd;
&#xd;
                                                                                      &lt;/descriptionTxt&gt;&#xd;
&#xd;
                                                                        &lt;/typeCode&gt;&#xd;
&#xd;
                                                                        &lt;typeCode&gt;&#xd;
&#xd;
                                                                                      &lt;typeCd&gt;FOR_TECHNICIAN&lt;/typeCd&gt;&#xd;
&#xd;
                                                                                      &lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
&#xd;
                                                                        &lt;/typeCode&gt;&#xd;
&#xd;
                                                          &lt;/remarkList&gt;&#xd;
&#xd;
                                                          &lt;workOrderDetailList&gt;&#xd;
&#xd;
                                                                        &lt;typeCode&gt;&#xd;
&#xd;
                                                                                      &lt;typeCd&gt;Activity&lt;/typeCd&gt;&#xd;
&#xd;
                                                                                      &lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
&#xd;
                                                                        &lt;/typeCode&gt;&#xd;
&#xd;
                                                          &lt;/workOrderDetailList&gt;&#xd;
&#xd;
                                           &lt;/ns5:workOrder&gt;&#xd;
&#xd;
                             &lt;/ns5:createWorkOrder&gt;&#xd;
&#xd;
              &lt;/S:Body&gt;&#xd;
&#xd;
&lt;/S:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">soa-mp-rmsk-is01.tsl.telus.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">RMO/ProcessMgmt/FieldWorkAssignmentMgmtService_v3_0_vs0</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">0</stringProp>
              <stringProp name="HTTPSampler.response_timeout">0</stringProp>
              <stringProp name="TestPlan.comments">002500${__Random(11000,11500,)}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic QVBQX1JFTkRFWlZPVVM6c29hb3JnaWQ=</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="false">
                <stringProp name="DurationAssertion.duration">0</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.putObject(&apos;count&apos;, 0)</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="cacheKey">false</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&apos;authorizationValue&apos;, org.apache.jmeter.protocol.http.util.Base64Encoder.encode(&apos;APP_RENDEZVOUS&apos; + &apos;:&apos; + lr_decrypt))</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="cacheKey">false</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="workOrderId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">workOrderId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;workOrderId&gt;([^&quot;]+)&lt;/workOrderId&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2432586">OPEN</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WIL_Cancel_Trouble" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:fiel=&quot;http://xmlschema.tmi.telus.com/srv/RMO/ProcessMgmt/FieldWorkAssignmentMgmtServiceRequestResponse_v3&quot;&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;   &lt;fiel:cancelWorkOrder&gt;      &lt;fiel:inputHeader&gt;         &lt;systemSourceCd&gt;3259&lt;/systemSourceCd&gt;         &lt;userId&gt;T942653&lt;/userId&gt;         &lt;requestDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/requestDate&gt;      &lt;/fiel:inputHeader&gt;      &lt;fiel:workOrder&gt;         &lt;workOrderId&gt;${workOrderId}&lt;/workOrderId&gt;      &lt;/fiel:workOrder&gt;   &lt;/fiel:cancelWorkOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">soa-mp-rmsk-is01.tsl.telus.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/RMO/ProcessMgmt/FieldWorkAssignmentMgmtService_v3_0_vs0</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">0</stringProp>
            <stringProp name="HTTPSampler.response_timeout">0</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value"> text/xml; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic QVBQX1JFTkRFWlZPVVM6c29hb3JnaWQ=</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
              <stringProp name="DurationAssertion.duration">0</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult
import org.apache.jmeter.assertions.XPathAssertion

def isSoapFault(result) {
    if (result.responseCode != &apos;500&apos;) {
        return false
    }
    def assertion = new XPathAssertion()
    assertion.setXPathString(&quot;//*[local-name()=&apos;Envelope&apos;]/*[local-name()=&apos;Body&apos;]/*[local-name()=&apos;Fault&apos;]&quot;)
    def assertResult = assertion.getResult(result)
    return !assertResult.isFailure() &amp;&amp; !assertResult.isError()
}

if (isSoapFault(prev)) {
    prev.setSuccessful(true)
}</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;response&quot;, prev.getResponseDataAsString());</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Iteration End Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def ItrEndTime = new Date()

use(groovy.time.TimeCategory) {
    vars.put(&quot;ItrEndTime&quot;, ItrEndTime.getTime() as String)
}

String Pacing = ((vars.get(&apos;ItrStartTime&apos;) as long) + 17800) - (vars.get(&apos;ItrEndTime&apos;) as long)

vars.put(&apos;Pacing&apos;, Pacing)</stringProp>
            <stringProp name="TestPlan.comments">give fixed pacing value here in place of the integer number</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${Pacing}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WIL_CheckAvailability_MultiTech" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <stringProp name="ThreadGroup.start_time"></stringProp>
        <stringProp name="ThreadGroup.end_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="Cache" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookies" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">false</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="user_defined" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">apigw-soap-st.tsl.telus.com:443</stringProp>
              <stringProp name="Authorization.username">APP_RENDEZVOUS</stringProp>
              <stringProp name="Authorization.password">soaorgid</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="appointmentEndDate" elementType="Argument">
              <stringProp name="Argument.name">appointmentEndDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P2D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="appointmentStartDate" elementType="Argument">
              <stringProp name="Argument.name">appointmentStartDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P1D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dueDate" elementType="Argument">
              <stringProp name="Argument.name">dueDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P22D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">not present</stringProp>
            </elementProp>
            <elementProp name="earlyStartDate" elementType="Argument">
              <stringProp name="Argument.name">earlyStartDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P17D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">not present</stringProp>
            </elementProp>
            <elementProp name="originatingSystemCreateDate" elementType="Argument">
              <stringProp name="Argument.name">originatingSystemCreateDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestDate" elementType="Argument">
              <stringProp name="Argument.name">requestDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counter" elementType="Argument">
              <stringProp name="Argument.name">counter</stringProp>
              <stringProp name="Argument.value">00${__Random(11000,11500,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Pacing" elementType="Argument">
              <stringProp name="Argument.name">Pacing</stringProp>
              <stringProp name="Argument.value">${__P(propPIpacing,180)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_estimatedDuration.dat.csv" enabled="false">
          <stringProp name="filename">wil_createtrouble_estimatedDuration.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">estimatedDuration</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_originatingSystemWoId.dat.csv" enabled="false">
          <stringProp name="filename">wil_createtrouble_originatingSystemWoId.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">originatingSystemWoId</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_Address.dat.csv" enabled="false">
          <stringProp name="filename">wil_createtrouble_Address.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">fmsAddressId,apartmentNumber,houseNumber,suffix,vector,street,city,provinceCode,postalCode,fmsCoid,clli,country</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_Product.dat.csv" enabled="false">
          <stringProp name="filename">wil_createtrouble_Product.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">productCategory,productTechnology,jobType,workGroupCode</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_originatingSystemWoInternalId.dat.csv" enabled="false">
          <stringProp name="filename">wil_createtrouble_originatingSystemWoInternalId.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">originatingSystemWoInternalId</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="LocationID" enabled="true">
          <stringProp name="filename">LocationID.txt</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">LocationID</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="endTime" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def dateobj= new Date();
def endTime = dateobj.getTime();
vars.put(&quot;endTime&quot;,endTime.toString())
log.info(&quot;Current date in the specified format: &quot; + endTime);
SampleResult.setIgnore();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${__jm__EnterpriseTMF676__idx}&quot; != &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing Timer" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${myDelay}</stringProp>
          </TestAction>
          <hashTree>
            <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">Long pacingInput = Long.valueOf(vars.get(&apos;Pacing&apos;))*1000;
Long elapsed = Long.valueOf(vars.get(&apos;endTime&apos;)) - Long.valueOf(vars.get(&apos;startTime&apos;))
Long pacing = pacingInput-elapsed;
if ( pacing &gt; 0 ) 
{
	vars.put(&quot;myDelay&quot;, String.valueOf(pacing));
	return 0;
}
else 
{
	vars.put(&quot;myDelay&quot;, &quot;0&quot;);
	return 0; 
}
</stringProp>
            </JSR223Timer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startTime" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def dateobj= new Date();
def startTime = dateobj.getTime();
log.info(&quot;Current date in the specified format: &quot; + startTime);
vars.put(&quot;startTime&quot;,startTime.toString())
SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="searchAvailableAppointmentList_with_multitech" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-dynaTrace</stringProp>
                <stringProp name="Header.value">NA=WIL_Create_Trouble;PC=${__samplerName()};VU=-${__threadNum()};ID=${__time()}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope&#xd;
	xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
	xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
	&lt;soapenv:Header/&gt;&#xd;
	&lt;soapenv:Body&#xd;
		xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
		xmlns:wsu=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot; wsu:Id=&quot;body_23f91e2e-4b26-4e34-81b8-7b395d4eaacb&quot;&gt;&#xd;
		&lt;ns1:searchAvailableAppointmentList&#xd;
			xmlns:ns1=&quot;http://xmlschema.tmi.telus.com/srv/RMO/ProcessMgmt/FieldWorkAppointmentServiceRequestResponse_v3&quot;&gt;&#xd;
			&lt;ns1:inputHeader&gt;&#xd;
				&lt;systemSourceCd&gt;13574&lt;/systemSourceCd&gt;&#xd;
				&lt;userId&gt;Falcon&lt;/userId&gt;&#xd;
				&lt;requestDate&gt;${requestDate}&lt;/requestDate&gt;&#xd;
			&lt;/ns1:inputHeader&gt;&#xd;
			&lt;ns1:workOrder&gt;&#xd;
				&lt;originatingSystemId&gt;13574&lt;/originatingSystemId&gt;&#xd;
				&lt;classificationCd&gt;ORDER&lt;/classificationCd&gt;&#xd;
				&lt;serviceClassCd&gt;R&lt;/serviceClassCd&gt;&#xd;
				&lt;productCategoryCd&gt;MASS_MARKET&lt;/productCategoryCd&gt;&#xd;
				&lt;jobTypeCd&gt;MASS_MARKET&lt;/jobTypeCd&gt;&#xd;
				&lt;location&gt;&#xd;
					&lt;locationList&gt;&#xd;
						&lt;typeCode&gt;SERVICE&lt;/typeCode&gt;&#xd;
						&lt;dispatchLocationInd&gt;true&lt;/dispatchLocationInd&gt;&#xd;
						&lt;locationAddress&gt;&#xd;
							&lt;locationId&gt;${LocationID}&lt;/locationId&gt;&#xd;
						&lt;/locationAddress&gt;&#xd;
					&lt;/locationList&gt;&#xd;
				&lt;/location&gt;&#xd;
				&lt;workOrderAttributeList/&gt;&#xd;
				&lt;requiredSkillList/&gt;&#xd;
				&lt;componentList&gt;&#xd;
					&lt;component&gt;&#xd;
						&lt;productCategoryCd&gt;TTV&lt;/productCategoryCd&gt;&#xd;
						&lt;jobTypeCd&gt;IPTV&lt;/jobTypeCd&gt;&#xd;
						&lt;workOrderActionCd&gt;PR&lt;/workOrderActionCd&gt;&#xd;
						&lt;productTechnologyCd&gt;GPON&lt;/productTechnologyCd&gt;&#xd;
						&lt;installationTypeCd&gt;FW&lt;/installationTypeCd&gt;&#xd;
						&lt;estimatedDurationNum&gt;2&lt;/estimatedDurationNum&gt;&#xd;
						&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;/component&gt;&#xd;
					&lt;component&gt;&#xd;
						&lt;productCategoryCd&gt;DSL&lt;/productCategoryCd&gt;&#xd;
						&lt;jobTypeCd&gt;HS&lt;/jobTypeCd&gt;&#xd;
						&lt;workOrderActionCd&gt;PR&lt;/workOrderActionCd&gt;&#xd;
						&lt;productTechnologyCd&gt;GPON&lt;/productTechnologyCd&gt;&#xd;
						&lt;installationTypeCd&gt;FW&lt;/installationTypeCd&gt;&#xd;
						&lt;estimatedDurationNum&gt;2&lt;/estimatedDurationNum&gt;&#xd;
						&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;/component&gt;&#xd;
					&lt;component&gt;&#xd;
						&lt;productCategoryCd&gt;SECURITY&lt;/productCategoryCd&gt;&#xd;
						&lt;jobTypeCd&gt;SECURITY&lt;/jobTypeCd&gt;&#xd;
						&lt;workOrderActionCd&gt;PR&lt;/workOrderActionCd&gt;&#xd;
						&lt;productTechnologyCd&gt;OTT&lt;/productTechnologyCd&gt;&#xd;
						&lt;installationTypeCd&gt;FW&lt;/installationTypeCd&gt;&#xd;
						&lt;estimatedDurationNum&gt;2&lt;/estimatedDurationNum&gt;&#xd;
						&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;/component&gt;&#xd;
					&lt;component&gt;&#xd;
						&lt;productCategoryCd&gt;POTS&lt;/productCategoryCd&gt;&#xd;
						&lt;jobTypeCd&gt;VOICE&lt;/jobTypeCd&gt;&#xd;
						&lt;workOrderActionCd&gt;PR&lt;/workOrderActionCd&gt;&#xd;
						&lt;productTechnologyCd&gt;GPON&lt;/productTechnologyCd&gt;&#xd;
						&lt;installationTypeCd&gt;FW&lt;/installationTypeCd&gt;&#xd;
						&lt;estimatedDurationNum&gt;2&lt;/estimatedDurationNum&gt;&#xd;
						&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;/component&gt;&#xd;
					&lt;component&gt;&#xd;
						&lt;productCategoryCd&gt;CONNECT&lt;/productCategoryCd&gt;&#xd;
						&lt;jobTypeCd&gt;CONNECT&lt;/jobTypeCd&gt;&#xd;
						&lt;workOrderActionCd&gt;PR&lt;/workOrderActionCd&gt;&#xd;
						&lt;productTechnologyCd&gt;GPON&lt;/productTechnologyCd&gt;&#xd;
						&lt;installationTypeCd&gt;FW&lt;/installationTypeCd&gt;&#xd;
						&lt;estimatedDurationNum&gt;2&lt;/estimatedDurationNum&gt;&#xd;
						&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;/component&gt;&#xd;
				&lt;/componentList&gt;&#xd;
			&lt;/ns1:workOrder&gt;&#xd;
			&lt;ns1:appointmentProfileName/&gt;&#xd;
			&lt;ns1:startDate&gt;${appointmentStartDate}&lt;/ns1:startDate&gt;&#xd;
			&lt;ns1:endDate&gt;${appointmentEndDate}&lt;/ns1:endDate&gt;&#xd;
			&lt;ns1:gradeAppointmentInd&gt;false&lt;/ns1:gradeAppointmentInd&gt;&#xd;
			&lt;ns1:fullSearchInd&gt;false&lt;/ns1:fullSearchInd&gt;&#xd;
		&lt;/ns1:searchAvailableAppointmentList&gt;&#xd;
	&lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apigw-soap-st.tsl.telus.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap/is01/RMO/ProcessMgmt/FieldWorkAppointmentService_v3_0_RP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">0</stringProp>
            <stringProp name="HTTPSampler.response_timeout">0</stringProp>
            <stringProp name="TestPlan.comments">002500${__Random(11000,11500,)}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic QVBQX1JFTkRFWlZPVVM6c29hb3JnaWQ=</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="false">
              <stringProp name="DurationAssertion.duration">0</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.putObject(&apos;count&apos;, 0)</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&apos;authorizationValue&apos;, org.apache.jmeter.protocol.http.util.Base64Encoder.encode(&apos;APP_RENDEZVOUS&apos; + &apos;:&apos; + lr_decrypt))</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="workOrderId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">workOrderId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;workOrderId&gt;([^&quot;]+)&lt;/workOrderId&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2432586">OPEN</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
