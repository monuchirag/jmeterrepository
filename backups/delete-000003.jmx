<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SFDC Direct" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">60</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NanaimoJobAndAddresses" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">NanaimoJobAndAddresses.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">SystemId,SystemWoId,SystemWoIntKey,ServiceClass,TeamMemQty,WorkOrderAct,WorkOrdCat,WorkOrderClas,Tech,JobType,Product,ToCharWorkOrderId,AppEndDateTime,AppStartDateTime,DueDate,EarlyStartTime,Duration,ExtJobGrpId,ExtJobId,JobId,VirNavHirId,SerAreaClliCd,LocationId,Longitude,Latitude,Street,Municipality,Province,PostalCode,CountryCode</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="WFM Work Order ID" enabled="false">
          <stringProp name="filename">WfmWorkOrderID.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">woid1,woid2,woid3,woid4</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="WorkOrder" enabled="true">
          <stringProp name="filename">C:/Users/chirag.mathur/Desktop/artifacts/TestDetails.txt</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">TempWorkOrder</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SFStartTime" elementType="Argument">
              <stringProp name="Argument.name">SFStartTime</stringProp>
              <stringProp name="Argument.value">2024-06-30T00:00:00-07:00</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SFDueData" elementType="Argument">
              <stringProp name="Argument.name">SFDueData</stringProp>
              <stringProp name="Argument.value">2024-07-06T23:59:59-07:00</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="thinktime1" elementType="Argument">
              <stringProp name="Argument.name">thinktime1</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="thinktime2" elementType="Argument">
              <stringProp name="Argument.name">thinktime2</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">telus-wfm--wfmsfst.sandbox.my.salesforce.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Token Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy((vars.getIteration() == 1) || ((vars.get(&apos;StartTime&apos;) as long) - (vars.get(&apos;EndTime&apos;) as long) &lt;= 0))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <stringProp name="TestPlan.comments">https://stackoverflow.com/questions/54416618/how-to-check-time-difference-in-if-controller</stringProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Token" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">password</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">3MVG9P7Pp4QrREPlhbgPtdgCCO473rg1e.sySQWDKGMBJ7cglDp.9nuVo3AhUxy.XATP02347iUUSlAQ.uX7Q</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                  <elementProp name="client_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">6587C098DFB4F551823C0E94EEF9C54FB222E44714C8EA4E357B1B9EFAF4BCF3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_secret</stringProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">panorama2@sfs.telus.com.wfmsfst</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">Make1tHappenU5JTkQwnJtB3EBpeafocu2wQS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">telus-fsm--staging.sandbox.my.salesforce.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/services/oauth2/token?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
              <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="access_token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Missing access_token</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Start and End Time" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def EndTime = new Date() 
use(groovy.time.TimeCategory) {
    def StartTime = EndTime + 180.seconds
    vars.put(&quot;StartTime&quot;, StartTime.getTime() as String)
    vars.put(&quot;EndTime&quot;, EndTime.getTime() as String)
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Create Temp WO" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;allOrNone&quot;: true,&#xd;
  &quot;collateSubrequests&quot;: true,&#xd;
  &quot;compositeRequest&quot;: [&#xd;
 {&#xd;
            &quot;method&quot;: &quot;GET&quot;,&#xd;
            &quot;url&quot;: &quot;/services/data/v58.0/query?q=select Id from Skill where developername = &apos;GPON&apos; LIMIT 1&quot;,&#xd;
            &quot;referenceId&quot;: &quot;refSkill1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;method&quot;: &quot;GET&quot;,&#xd;
            &quot;url&quot;: &quot;/services/data/v58.0/query?q=select Id from Skill where developername = &apos;Z_ST_CSD_FULFILL&apos; LIMIT 1&quot;,&#xd;
            &quot;referenceId&quot;: &quot;refSkill2&quot;&#xd;
        },&#xd;
    {&#xd;
      &quot;method&quot;: &quot;POST&quot;,&#xd;
      &quot;url&quot;: &quot;/services/data/v59.0/sobjects/WorkOrder&quot;,&#xd;
      &quot;referenceId&quot;: &quot;workOrderRef_1&quot;,&#xd;
      &quot;body&quot;: {&#xd;
        &quot;RecordType&quot;: {&#xd;
          &quot;Name&quot;: &quot;Temporary&quot;&#xd;
        },&#xd;
        &quot;Priority&quot;: &quot;LOW&quot;,&#xd;
        &quot;Country&quot;: &quot;CANADA&quot;,&#xd;
        &quot;City&quot;: &quot;VICTORIA&quot;,&#xd;
        &quot;Latitude&quot;: &quot;${Latitude}&quot;,&#xd;
        &quot;Longitude&quot;: &quot;${Longitude}&quot;,&#xd;
        &quot;PostalCode&quot;: &quot;${PostalCode}&quot;,&#xd;
        &quot;State&quot;: &quot;${Province}&quot;,&#xd;
        &quot;Street&quot;: &quot;${Street}&quot;,&#xd;
        &quot;ServiceTerritory&quot;: {&#xd;
          &quot;TLS_TerritoryCode__c&quot;: &quot;RES_NANAIMO&quot;&#xd;
        },&#xd;
        &quot;TLS_OrigSystemID__c&quot;: &quot;${SystemId}&quot;,&#xd;
        &quot;TLS_OrigSystemWorkOrderID__c&quot;: &quot;${SystemWoId}&quot;,&#xd;
        &quot;TLS_WFMWorkOrderID__c&quot;: &quot;${woid1}&quot;,&#xd;
        &quot;TLS_JobId__c&quot;: &quot;${woid2}&quot;,&#xd;
        &quot;TLS_WorkforceSegment__c&quot;: &quot;${WorkOrdCat}&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;method&quot;: &quot;POST&quot;,&#xd;
      &quot;url&quot;: &quot;/services/data/v59.0/sobjects/SkillRequirement&quot;,&#xd;
      &quot;referenceId&quot;: &quot;SkillReqRef_1&quot;,&#xd;
      &quot;body&quot;: {&#xd;
        &quot;RelatedRecordId&quot;: &quot;@{workOrderRef_1.id}&quot;,&#xd;
        &quot;SkillId&quot;: &quot;@{refSkill1.records[0].Id}&quot;,&#xd;
        &quot;SkillLevel&quot;: &quot;1&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;method&quot;: &quot;POST&quot;,&#xd;
      &quot;url&quot;: &quot;/services/data/v59.0/sobjects/SkillRequirement&quot;,&#xd;
      &quot;referenceId&quot;: &quot;SkillReqRef_2&quot;,&#xd;
      &quot;body&quot;: {&#xd;
        &quot;RelatedRecordId&quot;: &quot;@{workOrderRef_1.id}&quot;,&#xd;
        &quot;SkillId&quot;: &quot;@{refSkill2.records[0].Id}&quot;,&#xd;
        &quot;SkillLevel&quot;: &quot;3&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;method&quot;: &quot;POST&quot;,&#xd;
      &quot;url&quot;: &quot;/services/data/v59.0/sobjects/ServiceAppointment&quot;,&#xd;
      &quot;referenceId&quot;: &quot;serviceAppRef_1&quot;,&#xd;
      &quot;body&quot;: {&#xd;
        &quot;RecordType&quot;: {&#xd;
          &quot;Name&quot;: &quot;SA Temporary&quot;&#xd;
        },&#xd;
        &quot;ParentRecordId&quot;: &quot;@{workOrderRef_1.id}&quot;,&#xd;
        &quot;Duration&quot;: 90,&#xd;
        &quot;DurationType&quot;: &quot;MINUTES&quot;,&#xd;
        &quot;EarliestStartTime&quot;: &quot;${SFStartTime}&quot;,&#xd;
        &quot;DueDate&quot;: &quot;${SFDueData}&quot;,&#xd;
        &quot;ServiceTerritory&quot;: {&#xd;
          &quot;TLS_TerritoryCode__c&quot;: &quot;RES_NANAIMO&quot;&#xd;
        },&#xd;
        &quot;TLS_OrigSystemID__c&quot;: &quot;${SystemId}&quot;,&#xd;
        &quot;TLS_OrigSystemWorkOrderID__c&quot;: &quot;${SystemWoId}&quot;,&#xd;
        &quot;TLS_SolutionID__c&quot;: &quot;&quot;,&#xd;
        &quot;TLS_JobId__c&quot;: &quot;${woid3}&quot;,&#xd;
        &quot;TLS_WFMWorkOrderID__c&quot;: &quot;${woid4}&quot;,&#xd;
        &quot;TLS_JobType__c&quot;: &quot;${JobType}&quot;,&#xd;
        &quot;TLS_Technology__c&quot;: &quot;${Tech}&quot;,&#xd;
        &quot;TLS_ProductCategory__c&quot;: &quot;${Product}&quot;,&#xd;
        &quot;TLS_ServiceClassCode__c&quot;: &quot;${ServiceClass}&quot;,&#xd;
        &quot;TLS_WorkOrderClassification__c&quot;: &quot;${WorkOrderClas}&quot;,&#xd;
        &quot;TLS_ServiceArea__r&quot;: {&#xd;
          &quot;TLS_ServiceAreaCode__c&quot;: &quot;${SerAreaClliCd}&quot;&#xd;
        },&#xd;
        &quot;TLS_IsMultiTechInd__c&quot;: false,&#xd;
        &quot;TLS_HasComponentsInd__c&quot;: false,&#xd;
        &quot;TLS_InternalTechnicianInd__c&quot;: false,&#xd;
        &quot;TLS_WorkforceSegment__c&quot;: &quot;${WorkOrdCat}&quot;,&#xd;
        &quot;TLS_DemandCategory__c&quot;: &quot;Z_ST_CSD_ASSURE&quot;,&#xd;
        &quot;TLS_SkillLevelUsage__c&quot;: &quot;DIGITAL_HOME&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/data/v59.0/composite</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
          <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">180000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">180000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Service Appointment" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SerApp</stringProp>
            <stringProp name="RegexExtractor.regex">ServiceAppointment/(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">None</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Temp Work Order" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">TempWorkOrder</stringProp>
            <stringProp name="RegexExtractor.regex">sobjects/WorkOrder/(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">None</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Post Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1637950922">ServiceAppointment</stringProp>
              <stringProp name="-1215319395">WorkOrder</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Post Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;CreateWoResponseTime&quot;, String.valueOf(prev.getTime()));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WO If Controller " enabled="false">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} == false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;FailedCreateWOSample.txt&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
AppId1=vars.get(&quot;SerApp&quot;);
WOId1=vars.get(&quot;TempWorkOrder&quot;);
ResTime1=vars.get(&quot;CreateWoResponseTime&quot;);
out.write(AppId1+&quot;,&quot;+WOId1+&quot;,&quot;+ResTime1+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${thinktime1}</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Slot" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/apexrest/AppointmentBooking/${SerApp}?operatinghours=RES AW Profile 1&amp;exactappointment=false&amp;schedulingpolicy=TELUS Booking API Scheduling Policy&amp;abslots=false</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
          <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">180000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">180000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Get Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="570418373">interval</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Get Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;GetSlotResponseTime&quot;, String.valueOf(prev.getTime()));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Slot Count" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">count</stringProp>
            <stringProp name="RegexExtractor.regex">interval&quot;:\{&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">None</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang.StringUtils;
String Filenamedynamic =&quot;slotcount.txt&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
String response = new String(data);
int count = StringUtils.countMatches(response, &quot;start&quot;);
slotcount=vars.get(&quot;count_matchNr&quot;);
out.write(slotcount+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Slot If Controller " enabled="false">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} == false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;FailedGetSlotSample.txt&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
AppId2=vars.get(&quot;SerApp&quot;);
ResTime2=vars.get(&quot;GetSlotResponseTime&quot;);
CountNo=vars.get(&quot;count_matchNr&quot;);
out.write(AppId2+&quot;,&quot;+ResTime2+&quot;,&quot;+CountNo+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${thinktime2}</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Temp WO" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;allOrNone&quot;: true,&#xd;
  &quot;collateSubrequests&quot;: true,&#xd;
  &quot;compositeRequest&quot;: [&#xd;
    {&#xd;
      &quot;method&quot;: &quot;DELETE&quot;,&#xd;
      &quot;url&quot;: &quot;/services/data/v59.0/sobjects/WorkOrder/${TempWorkOrder}&quot;,&#xd;
      &quot;referenceId&quot;: &quot;workOrderRef_0&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/data/v59.0/composite</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
          <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">180000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">180000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Delete Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
              <stringProp name="614953960">compositeResponse</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Delete Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;DeleteWOResponseTime&quot;, String.valueOf(prev.getTime()));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Delete If Controller " enabled="true">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} == false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;FailedDeleteWOSample.txt&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
WOId3=vars.get(&quot;TempWorkOrder&quot;);
ResTime3=vars.get(&quot;DeleteWOResponseTime&quot;);
out.write(WOId3+&quot;,&quot;+ResTime3+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${thinktime2}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="exportFile" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.apache.jmeter.services.FileServer;
String Path = FileServer.getFileServer().getBaseDir();
String Seperator = File.separator;
BufferedWriter bw = null;
FileWriter fw = null;
String filename=Path+Seperator+&quot;TestDetails.txt&quot;;
String headLine=&quot;ServiceAppointmentId,WorkOrderId,CreateWOResponseTime(ms),GetSlotResponseTime(ms),SlotCount,DeleteWOResponseTime(ms)&quot;+&quot;\n&quot;;
String data=vars.get(&quot;SerApp&quot;)+&quot;,&quot;+vars.get(&quot;TempWorkOrder&quot;)+&quot;,&quot;+vars.get(&quot;CreateWoResponseTime&quot;)+&quot;,&quot;+vars.get(&quot;GetSlotResponseTime&quot;)+&quot;,&quot;+vars.get(&quot;count_matchNr&quot;)+&quot;,&quot;+vars.get(&quot;DeleteWOResponseTime&quot;)+&quot;\n&quot;;
File file = new File(filename);
if (!file.exists()) {
  file.createNewFile();
  fw = new FileWriter(file.getAbsoluteFile(), true);
  bw = new BufferedWriter(fw);
  bw.write(headLine);
  bw.close();
}
fw = new FileWriter(file.getAbsoluteFile(), true);
bw = new BufferedWriter(fw);
bw.write(data);
bw.close();
SampleResult.setIgnore();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get End Time" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">EndTime = new Date() 
use(groovy.time.TimeCategory) {
    vars.put(&quot;EndTime&quot;, EndTime.getTime() as String)
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
