<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BTV_OPUS_Business" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="baseurl" elementType="Argument">
              <stringProp name="Argument.name">baseurl</stringProp>
              <stringProp name="Argument.value">apigw-private-yul-np-001.cloudapps.telus.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ServiceDate" elementType="Argument">
              <stringProp name="Argument.name">ServiceDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;,,-PT5H30M,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="EffectiveDate" elementType="Argument">
              <stringProp name="Argument.name">EffectiveDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;,,-PT5H30M,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Pacing" elementType="Argument">
              <stringProp name="Argument.name">Pacing</stringProp>
              <stringProp name="Argument.value">${__P(propPacing,25)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">9166500000000011111</stringProp>
          <stringProp name="CounterConfig.end">9166500000000081110</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">CServiceID</stringProp>
          <stringProp name="CounterConfig.format">0000000000000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="endTime" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def dateobj= new Date();
def endTime = dateobj.getTime();
vars.put(&quot;endTime&quot;,endTime.toString())
log.info(&quot;Current date in the specified format: &quot; + endTime);
SampleResult.setIgnore();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">&quot;${__jm__BTV_OPUS_Business__idx}&quot; != &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing Timer" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${myDelay}</stringProp>
          </TestAction>
          <hashTree>
            <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">Long pacingInput = Long.valueOf(vars.get(&apos;Pacing&apos;))*1000;
Long elapsed = Long.valueOf(vars.get(&apos;endTime&apos;)) - Long.valueOf(vars.get(&apos;startTime&apos;))
Long pacing = pacingInput-elapsed;
if ( pacing &gt; 0 ) 
{
	vars.put(&quot;myDelay&quot;, String.valueOf(pacing));
	return 0;
}
else 
{
	vars.put(&quot;myDelay&quot;, &quot;0&quot;);
	return 0; 
}
</stringProp>
            </JSR223Timer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startTime" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def dateobj= new Date();
def startTime = dateobj.getTime();
log.info(&quot;Current date in the specified format: &quot; + startTime);
vars.put(&quot;startTime&quot;,startTime.toString())
SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy((vars.getIteration() == 1) || ((vars.get(&apos;StartTime&apos;) as long) - (vars.get(&apos;EndTime&apos;) as long) &lt;= 0))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Access_Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">24f0951a-e705-4604-8da2-2d0af37c97c3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">a5e6e626-1c91-494a-b56a-952aa5d9151bb9de610d-07e7-4d64-af5e-d5b2591dd522</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">768</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apigw-st.tsl.telus.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/st/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Token Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">access_token</stringProp>
              <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Token_Failed</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Start and End Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def EndTime = new Date() 
use(groovy.time.TimeCategory) {
    def StartTime = EndTime + 180.seconds
    vars.put(&quot;StartTime&quot;, StartTime.getTime() as String)
    vars.put(&quot;EndTime&quot;, EndTime.getTime() as String)
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create_Service_Business" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CreateServiceID" enabled="false">
            <stringProp name="filename">CreateServiceID_BTV.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CServiceID</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="category" enabled="true">
            <stringProp name="filename">Category.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">category</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_CreateService_Business" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;${CServiceID}&quot;,&#xd;
	&quot;uuid&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
	&quot;@type&quot;: &quot;IPTVServiceActivationAndConfiguration&quot;,&#xd;
	&quot;place&quot;: {&#xd;
		&quot;id&quot;: &quot;12804874&quot;,&#xd;
		&quot;href&quot;: &quot;&quot;,&#xd;
		&quot;name&quot;: &quot;lpds&quot;&#xd;
	},&#xd;
	&quot;feature&quot;: [{&#xd;
			&quot;id&quot;: &quot;1&quot;,&#xd;
			&quot;name&quot;: &quot;Subscription&quot;,&#xd;
			&quot;featureCharacteristic&quot;: [{&#xd;
				&quot;id&quot;: &quot;100&quot;,&#xd;
				&quot;name&quot;: &quot;SubscriptionFeatureCharacteristic&quot;,&#xd;
				&quot;value&quot;: [{&#xd;
					&quot;subscriptionList&quot;: [{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVRetro&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						}, {&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakFamily&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVStarter1&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVNews&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVVariety&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakSNETComm&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakVariety&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakTSNSNETComm&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakTSNComm&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakTimeChoices&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakSports&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakPopChoices&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakNews&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakLearning&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakEssentTopUp&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakEntertain&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakAdventure2&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVMovie&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						}&#xd;
					]&#xd;
				}],&#xd;
				&quot;valueType&quot;: &quot;object&quot;&#xd;
			}]&#xd;
		}, {&#xd;
			&quot;id&quot;: &quot;4&quot;,&#xd;
			&quot;name&quot;: &quot;NPVR&quot;,&#xd;
			&quot;featureCharacteristic&quot;: [{&#xd;
				&quot;id&quot;: &quot;400&quot;,&#xd;
				&quot;name&quot;: &quot;NPVRFeatureCharacteristic&quot;,&#xd;
				&quot;value&quot;: [{&#xd;
					&quot;cloudList&quot;: [{&#xd;
						&quot;duration&quot;: &quot;45&quot;,&#xd;
						&quot;quota&quot;: &quot;999999&quot;,&#xd;
						&quot;action&quot;: &quot;Assign&quot;&#xd;
					}]&#xd;
				}]&#xd;
			}]&#xd;
		},&#xd;
		{&#xd;
			&quot;id&quot;: &quot;2&quot;,&#xd;
			&quot;name&quot;: &quot;Device&quot;,&#xd;
			&quot;featureCharacteristic&quot;: [{&#xd;
				&quot;id&quot;: &quot;200&quot;,&#xd;
				&quot;name&quot;: &quot;DeviceFeatureCharacteristic&quot;,&#xd;
				&quot;value&quot;: [{&#xd;
					&quot;deviceList&quot;: []&#xd;
				}],&#xd;
				&quot;valueType&quot;: &quot;object&quot;&#xd;
			}]&#xd;
		}&#xd;
	],&#xd;
	&quot;category&quot;: &quot;${category}&quot;,&#xd;
	&quot;georange&quot;: &quot;Edmonton&quot;,&#xd;
	&quot;timeZone&quot;: &quot;America/Edmonton&quot;,&#xd;
	&quot;@baseType&quot;: &quot;ServiceActivationAndConfiguration&quot;,&#xd;
	&quot;parentalPin&quot;: &quot;&quot;,&#xd;
	&quot;profileName&quot;: &quot;Telus_PUB&quot;,&#xd;
	&quot;purchasePin&quot;: &quot;&quot;,&#xd;
	&quot;serviceDate&quot;: &quot;${ServiceDate}&quot;,&#xd;
	&quot;isAVSEnabled&quot;: &quot;TRUE&quot;,&#xd;
	&quot;marketSegment&quot;: &quot;Business&quot;,&#xd;
	&quot;viewSettingType&quot;: &quot;Public&quot;,&#xd;
	&quot;serviceCharacteristic&quot;: [{&#xd;
		&quot;name&quot;: &quot;Upload&quot;,&#xd;
		&quot;value&quot;: &quot;&quot;,&#xd;
		&quot;valueType&quot;: &quot;String&quot;&#xd;
	}, {&#xd;
		&quot;name&quot;: &quot;Download&quot;,&#xd;
		&quot;value&quot;: &quot;&quot;,&#xd;
		&quot;valueType&quot;: &quot;String&quot;&#xd;
	}, {&#xd;
		&quot;name&quot;: &quot;AccessType&quot;,&#xd;
		&quot;value&quot;: &quot;GPON&quot;,&#xd;
		&quot;valueType&quot;: &quot;String&quot;&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">180000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">180000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
                <elementProp name="x-dynatrace-test" elementType="Header">
                  <stringProp name="Header.name">x-dynatrace-test</stringProp>
                  <stringProp name="Header.value">LSN=BOPUS;TSN=${__samplerName()};SI=BZM;LTN=BOPUS;VU=${__threadNum()};</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1082186784">Business</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1151721305">${CServiceID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">categorys</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;category&quot;: &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ServiceId Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">serviceId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">No Value</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_CreateService_Business" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;9198400000000080001&quot;,&#xd;
	&quot;uuid&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
	&quot;@type&quot;: &quot;IPTVServiceActivationAndConfiguration&quot;,&#xd;
	&quot;place&quot;: {&#xd;
		&quot;id&quot;: &quot;12804874&quot;,&#xd;
		&quot;href&quot;: &quot;&quot;,&#xd;
		&quot;name&quot;: &quot;lpds&quot;&#xd;
	},&#xd;
	&quot;feature&quot;: [{&#xd;
			&quot;id&quot;: &quot;1&quot;,&#xd;
			&quot;name&quot;: &quot;Subscription&quot;,&#xd;
			&quot;featureCharacteristic&quot;: [{&#xd;
				&quot;id&quot;: &quot;100&quot;,&#xd;
				&quot;name&quot;: &quot;SubscriptionFeatureCharacteristic&quot;,&#xd;
				&quot;value&quot;: [{&#xd;
					&quot;subscriptionList&quot;: [{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVRetro&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						}, {&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakFamily&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVStarter1&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVNews&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVVariety&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;action&quot;: &quot;Assign&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakSNETComm&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakVariety&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakTSNSNETComm&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakTSNComm&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakTimeChoices&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakSports&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakPopChoices&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakNews&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakLearning&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakEssentTopUp&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakEntertain&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakAdventure2&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
							&quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
							&quot;subscription&quot;: &quot;PakBTVMovie&quot;,&#xd;
							&quot;action&quot;: &quot;Assign&quot;&#xd;
						}&#xd;
					]&#xd;
				}],&#xd;
				&quot;valueType&quot;: &quot;object&quot;&#xd;
			}]&#xd;
		}, {&#xd;
			&quot;id&quot;: &quot;4&quot;,&#xd;
			&quot;name&quot;: &quot;NPVR&quot;,&#xd;
			&quot;featureCharacteristic&quot;: [{&#xd;
				&quot;id&quot;: &quot;400&quot;,&#xd;
				&quot;name&quot;: &quot;NPVRFeatureCharacteristic&quot;,&#xd;
				&quot;value&quot;: [{&#xd;
					&quot;cloudList&quot;: [{&#xd;
						&quot;duration&quot;: &quot;45&quot;,&#xd;
						&quot;quota&quot;: &quot;999999&quot;,&#xd;
						&quot;action&quot;: &quot;Assign&quot;&#xd;
					}]&#xd;
				}]&#xd;
			}]&#xd;
		},&#xd;
		{&#xd;
			&quot;id&quot;: &quot;2&quot;,&#xd;
			&quot;name&quot;: &quot;Device&quot;,&#xd;
			&quot;featureCharacteristic&quot;: [{&#xd;
				&quot;id&quot;: &quot;200&quot;,&#xd;
				&quot;name&quot;: &quot;DeviceFeatureCharacteristic&quot;,&#xd;
				&quot;value&quot;: [{&#xd;
					&quot;deviceList&quot;: []&#xd;
				}],&#xd;
				&quot;valueType&quot;: &quot;object&quot;&#xd;
			}]&#xd;
		}&#xd;
	],&#xd;
	&quot;category&quot;: &quot;${category}&quot;,&#xd;
	&quot;georange&quot;: &quot;Edmonton&quot;,&#xd;
	&quot;timeZone&quot;: &quot;America/Edmonton&quot;,&#xd;
	&quot;@baseType&quot;: &quot;ServiceActivationAndConfiguration&quot;,&#xd;
	&quot;parentalPin&quot;: &quot;&quot;,&#xd;
	&quot;profileName&quot;: &quot;Telus_PUB&quot;,&#xd;
	&quot;purchasePin&quot;: &quot;&quot;,&#xd;
	&quot;serviceDate&quot;: &quot;${ServiceDate}&quot;,&#xd;
	&quot;isAVSEnabled&quot;: &quot;TRUE&quot;,&#xd;
	&quot;marketSegment&quot;: &quot;Business&quot;,&#xd;
	&quot;viewSettingType&quot;: &quot;Public&quot;,&#xd;
	&quot;serviceCharacteristic&quot;: [{&#xd;
		&quot;name&quot;: &quot;Upload&quot;,&#xd;
		&quot;value&quot;: &quot;&quot;,&#xd;
		&quot;valueType&quot;: &quot;String&quot;&#xd;
	}, {&#xd;
		&quot;name&quot;: &quot;Download&quot;,&#xd;
		&quot;value&quot;: &quot;&quot;,&#xd;
		&quot;valueType&quot;: &quot;String&quot;&#xd;
	}, {&#xd;
		&quot;name&quot;: &quot;AccessType&quot;,&#xd;
		&quot;value&quot;: &quot;GPON&quot;,&#xd;
		&quot;valueType&quot;: &quot;String&quot;&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">180000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">180000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
                <elementProp name="x-dynatrace-test" elementType="Header">
                  <stringProp name="Header.name">x-dynatrace-test</stringProp>
                  <stringProp name="Header.value">LSN=BOPUS;TSN=${__samplerName()};SI=BZM;LTN=BOPUS;VU=${__threadNum()};</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1082186784">Business</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1151721305">${CServiceID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">categorys</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;category&quot;: &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">none</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ServiceId Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">serviceId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">No Value</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;header.txt&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
sid=vars.get(&quot;env&quot;);
//cats=vars.get(&quot;category&quot;);
//out.write(sid+&quot;,&quot;+cats+&quot;\n&quot;);
out.write(sid+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Suspend_Resume_Service_Business" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SuspendResumeServiceID" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">SuspendResumeServiceID.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">SServiceID</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH_SuspendService_Business" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;${SServiceID}&quot;,&#xd;
	&quot;@baseType&quot;:&quot;ServiceActivationAndConfiguration&quot;,&#xd;
	&quot;@type&quot;: &quot;IPTVServiceActivationAndConfiguration&quot;,	&#xd;
	&quot;isAVSEnabled&quot;: &quot;FALSE&quot;,&#xd;
	&quot;serviceDate&quot;: &quot;${ServiceDate}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/${SServiceID}/</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
                <elementProp name="x-dynatrace-test" elementType="Header">
                  <stringProp name="Header.name">x-dynatrace-test</stringProp>
                  <stringProp name="Header.value">LSN=BOPUS;TSN=${__samplerName()};SI=BZM;LTN=BOPUS;VU=${__threadNum()};</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1082186784">Business</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1829696663">${SServiceID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH_ResumeService_Business" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;${SServiceID}&quot;,&#xd;
	&quot;@baseType&quot;:&quot;ServiceActivationAndConfiguration&quot;,&#xd;
	&quot;@type&quot;: &quot;IPTVServiceActivationAndConfiguration&quot;,	&#xd;
	&quot;isAVSEnabled&quot;: &quot;TRUE&quot;,&#xd;
	&quot;serviceDate&quot;: &quot;${ServiceDate}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/${SServiceID}/</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
                <elementProp name="x-dynatrace-test" elementType="Header">
                  <stringProp name="Header.name">x-dynatrace-test</stringProp>
                  <stringProp name="Header.value">LSN=BOPUS;TSN=${__samplerName()};SI=BZM;LTN=BOPUS;VU=${__threadNum()};</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1082186784">Business</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1829696663">${SServiceID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Update_Subscription_Business" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH_UpdateSubscription_Business" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${UServiceID}&quot;,&#xd;
  &quot;@type&quot;: &quot;IPTVServiceActivationAndConfiguration&quot;,&#xd;
  &quot;feature&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;1&quot;,&#xd;
      &quot;name&quot;: &quot;Subscription&quot;,&#xd;
      &quot;featureCharacteristic&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: &quot;100&quot;,&#xd;
          &quot;name&quot;: &quot;SubscriptionFeatureCharacteristic&quot;,&#xd;
          &quot;value&quot;: [&#xd;
            {&#xd;
              &quot;subscriptionList&quot;: [&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Assign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakAdventure2&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Deassign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakEntertain&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Retain&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakEssentTopUp&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Assign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakLearning&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Deassign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakNews&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Retain&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakPopChoices&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Assign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakSports&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Deassign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakTimeChoices&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Retain&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakTSNComm&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Assign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakTSNSNETComm&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Deassign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakVariety&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Assign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakSNETComm&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;action&quot;: &quot;Deassign&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakFamily&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakBTVRetro&quot;,&#xd;
                  &quot;action&quot;: &quot;Retain&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakBTVStarter1&quot;,&#xd;
                  &quot;action&quot;: &quot;Deassign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakBTVNews&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakBTVVariety&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakBTVMovie&quot;,&#xd;
                  &quot;action&quot;: &quot;Retain&quot;&#xd;
                }&#xd;
              ]&#xd;
            }&#xd;
          ],&#xd;
          &quot;valueType&quot;: &quot;object&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;category&quot;: &quot;${Cat}&quot;,&#xd;
  &quot;georange&quot;: &quot;Edmonton&quot;,&#xd;
  &quot;@baseType&quot;: &quot;ServiceActivationAndConfiguration&quot;,&#xd;
  &quot;profileName&quot;: &quot;Telus_HEALTH_PVT&quot;,&#xd;
  &quot;marketSegment&quot;: &quot;Business&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/${UServiceID}/</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
                <elementProp name="x-dynatrace-test" elementType="Header">
                  <stringProp name="Header.name">x-dynatrace-test</stringProp>
                  <stringProp name="Header.value">LSN=BOPUS;TSN=${__samplerName()};SI=BZM;LTN=BOPUS;VU=${__threadNum()};</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SubscriptionServiceID" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">UpdateServiceID.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">UServiceID,Cat</stringProp>
            </CSVDataSet>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1082186784">Business</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1128632085">${UServiceID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Delete_Service_Business" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="DeleteServiceID" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">DeleteServiceID.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">DServiceID</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE_DeleteService_Business" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="isPermanent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">TRUE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isPermanent</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;,,-PT5H30M,,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/${DServiceID}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
                <elementProp name="x-dynatrace-test" elementType="Header">
                  <stringProp name="Header.name">x-dynatrace-test</stringProp>
                  <stringProp name="Header.value">LSN=BOPUS;TSN=${__samplerName()};SI=BZM;LTN=BOPUS;VU=${__threadNum()};</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1082186784">Business</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-645230054">${DServiceID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get End Time" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">EndTime = new Date() 
use(groovy.time.TimeCategory) {
    vars.put(&quot;EndTime&quot;, EndTime.getTime() as String)
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
