<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BZT Generated Test Plan" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WIL_CreateTrouble" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">34</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(Users_WILCreateTrouble,20)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <stringProp name="ThreadGroup.start_time"></stringProp>
        <stringProp name="ThreadGroup.end_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="Cache" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookies" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">false</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Pacing" elementType="Argument">
              <stringProp name="Argument.name">Pacing</stringProp>
              <stringProp name="Argument.value">${__P(propPIpacing,106)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="user_defined" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">360000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">360000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">soa-mp-rmsk-is01.tsl.telus.com:443</stringProp>
              <stringProp name="Authorization.username">APP_RENDEZVOUS</stringProp>
              <stringProp name="Authorization.password">soaorgid</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_estimatedDuration.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_estimatedDuration.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">estimatedDuration</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_originatingSystemWoId.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_originatingSystemWoId.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">originatingSystemWoId</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="WIL_CreateTrouble_LocationID" enabled="true">
          <stringProp name="filename">LocationID.txt</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">LocationId</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_Product.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_Product.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">productCategory,productTechnology,jobType,workGroupCode</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV wil_createtrouble_originatingSystemWoInternalId.dat.csv" enabled="true">
          <stringProp name="filename">wil_createtrouble_originatingSystemWoInternalId.dat.csv</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">originatingSystemWoInternalId</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="endTime" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def dateobj= new Date();
def endTime = dateobj.getTime();
vars.put(&quot;endTime&quot;,endTime.toString())
log.info(&quot;Current date in the specified format: &quot; + endTime);
SampleResult.setIgnore();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${__jm__EnterpriseTMF676__idx}&quot; != &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing Timer" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${myDelay}</stringProp>
          </TestAction>
          <hashTree>
            <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">Long pacingInput = Long.valueOf(vars.get(&apos;Pacing&apos;))*1000;
Long elapsed = Long.valueOf(vars.get(&apos;endTime&apos;)) - Long.valueOf(vars.get(&apos;startTime&apos;))
Long pacing = pacingInput-elapsed;
if ( pacing &gt; 0 ) 
{
	vars.put(&quot;myDelay&quot;, String.valueOf(pacing));
	return 0;
}
else 
{
	vars.put(&quot;myDelay&quot;, &quot;0&quot;);
	return 0; 
}
</stringProp>
            </JSR223Timer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startTime" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def dateobj= new Date();
def startTime = dateobj.getTime();
log.info(&quot;Current date in the specified format: &quot; + startTime);
vars.put(&quot;startTime&quot;,startTime.toString())
SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WIL_Create_Trouble" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-dynaTrace</stringProp>
                <stringProp name="Header.value">NA=WIL_Create_Trouble;PC=${__samplerName()};VU=-${__threadNum()};ID=${__time()}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="appointmentEndDate" elementType="Argument">
                <stringProp name="Argument.name">appointmentEndDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P3D,,)}T21:00:00.645Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="appointmentStartDate" elementType="Argument">
                <stringProp name="Argument.name">appointmentStartDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P2D,,)}T21:00:00.645Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dueDate" elementType="Argument">
                <stringProp name="Argument.name">dueDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P22D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">not present</stringProp>
              </elementProp>
              <elementProp name="earlyStartDate" elementType="Argument">
                <stringProp name="Argument.name">earlyStartDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P17D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">not present</stringProp>
              </elementProp>
              <elementProp name="originatingSystemCreateDate" elementType="Argument">
                <stringProp name="Argument.name">originatingSystemCreateDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="requestDate" elementType="Argument">
                <stringProp name="Argument.name">requestDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="counter" elementType="Argument">
                <stringProp name="Argument.name">counter</stringProp>
                <stringProp name="Argument.value">00${__Random(11000,11500,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Iteration Start Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def ItrStartTime = new Date() 
use(groovy.time.TimeCategory) {
    vars.put(&quot;ItrStartTime&quot;, ItrStartTime.getTime() as String)
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;S:Envelope&#xd;
	xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
	xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
	&lt;S:Header&#xd;
		xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; /&gt;&#xd;
		&lt;S:Body&#xd;
			xmlns:wsu=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;&#xd;
&#xd;
                             wsu:Id=&quot;id-1797998605&quot;&gt;&#xd;
			&lt;ns5:createWorkOrder&#xd;
				xmlns:ns5=&quot;http://xmlschema.tmi.telus.com/srv/RMO/ProcessMgmt/FieldWorkAssignmentMgmtServiceRequestResponse_v3&quot;&#xd;
				xmlns:ns2=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/Exceptions_v3&quot;&#xd;
				xmlns:ns3=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/EnterpriseCommonTypes_v9&quot;&#xd;
				xmlns:ns4=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/types/ping_v1&quot;&gt;&#xd;
				&lt;ns5:inputHeader&gt;&#xd;
					&lt;systemSourceCd&gt;8517&lt;/systemSourceCd&gt;&#xd;
					&lt;userId&gt;T856407&lt;/userId&gt;&#xd;
					&lt;requestDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/requestDate&gt;&#xd;
				&lt;/ns5:inputHeader&gt;&#xd;
				&lt;ns5:workOrder&gt;&#xd;
					&lt;originatingSystemId&gt;3259&lt;/originatingSystemId&gt;&#xd;
					&lt;originatingSystemWorkOrderId&gt;SFTST1${Random1}${__time()}&lt;/originatingSystemWorkOrderId&gt;&#xd;
					&lt;originatingSystemWorkOrderInternalId&gt;SFTST1${Random2}${__time()}&lt;/originatingSystemWorkOrderInternalId&gt;&#xd;
					&lt;classificationCd&gt;TROUBLE&lt;/classificationCd&gt;&#xd;
					&lt;serviceClassCd&gt;R&lt;/serviceClassCd&gt;&#xd;
					&lt;productCategoryCd&gt;${productCategory}&lt;/productCategoryCd&gt;&#xd;
					&lt;productTechnologyCd&gt;${productTechnology}&lt;/productTechnologyCd&gt;&#xd;
					&lt;workGroupCd&gt;${workGroupCode}&lt;/workGroupCd&gt;&#xd;
					&lt;workOrderActionCd&gt;R&lt;/workOrderActionCd&gt;&#xd;
					&lt;jobTypeCd&gt;${jobType}&lt;/jobTypeCd&gt;&#xd;
					&lt;outofServiceInd&gt;true&lt;/outofServiceInd&gt;&#xd;
					&lt;hostReadyForDispatchInd&gt;false&lt;/hostReadyForDispatchInd&gt;&#xd;
					&lt;overrideInd&gt;false&lt;/overrideInd&gt;&#xd;
					&lt;appointmentStartDate&gt;${__timeShift(yyyy-MM-dd,,P1D,,)}T21:00:00.645Z&lt;/appointmentStartDate&gt;&#xd;
					&lt;appointmentEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}T21:00:00.645Z&lt;/appointmentEndDate&gt;&#xd;
					&lt;estimatedDurationNum&gt;${estimatedDuration}&lt;/estimatedDurationNum&gt;&#xd;
					&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;location&gt;&#xd;
						&lt;locationList&gt;&#xd;
							&lt;typeCode&gt;SERVICE&lt;/typeCode&gt;&#xd;
							&lt;dispatchLocationInd&gt;true&lt;/dispatchLocationInd&gt;&#xd;
							&lt;locationAddress&gt;&#xd;
								&lt;locationId&gt;${LocationId}&lt;/locationId&gt;&#xd;
							&lt;/locationAddress&gt;&#xd;
						&lt;/locationList&gt;&#xd;
					&lt;/location&gt;&#xd;
					&lt;customerName&gt;MANIRAHO JEAN&lt;/customerName&gt;&#xd;
					&lt;customerRatingCd&gt;C&lt;/customerRatingCd&gt;&#xd;
					&lt;customerTypeCd&gt;CUSTOMER&lt;/customerTypeCd&gt;&#xd;
					&lt;contactList&gt;&#xd;
						&lt;name&gt;Jean&lt;/name&gt;&#xd;
						&lt;typeCd&gt;CBR&lt;/typeCd&gt;&#xd;
						&lt;phoneNumber&gt;7807297761&lt;/phoneNumber&gt;&#xd;
						&lt;phoneLocationCd&gt;AUT&lt;/phoneLocationCd&gt;&#xd;
					&lt;/contactList&gt;&#xd;
					&lt;originatingSystemCreateDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&#xd;
&#xd;
                                                          &lt;/originatingSystemCreateDate&gt;&#xd;
					&lt;workOrderAttributeList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;NOTIFICATION_IND&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;false&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/workOrderAttributeList&gt;&#xd;
					&lt;remarkList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;GENERAL&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;FOR_TECHNICIAN&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/remarkList&gt;&#xd;
					&lt;workOrderDetailList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;Activity&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/workOrderDetailList&gt;&#xd;
				&lt;/ns5:workOrder&gt;&#xd;
			&lt;/ns5:createWorkOrder&gt;&#xd;
		&lt;/S:Body&gt;&#xd;
	&lt;/S:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apigw-soap-st.tsl.telus.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap/is01/RMO/ProcessMgmt/FieldWorkAssignmentMgmtService_v3_0_RP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">0</stringProp>
            <stringProp name="HTTPSampler.response_timeout">0</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic QVBQX1JFTkRFWlZPVVM6c29hb3JnaWQ=</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
              <stringProp name="DurationAssertion.duration">0</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.putObject(&apos;count&apos;, 0)</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&apos;authorizationValue&apos;, org.apache.jmeter.protocol.http.util.Base64Encoder.encode(&apos;APP_RENDEZVOUS&apos; + &apos;:&apos; + lr_decrypt))</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="workOrderId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">workOrderId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;workOrderId&gt;([^&quot;]+)&lt;/workOrderId&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2432586">OPEN</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">status OPEN not found</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">21000</stringProp>
            <stringProp name="minimumValue">19000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">Random1</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">23000</stringProp>
            <stringProp name="minimumValue">21000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">Random2</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="exportFile" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.apache.jmeter.services.FileServer;
String Path = FileServer.getFileServer().getBaseDir();
String Seperator = File.separator;
BufferedWriter bw = null;
FileWriter fw = null;
String filename=Path+Seperator+&quot;WorkIDs.txt&quot;;
String headLine=&quot;WOID&quot;+&quot;\n&quot;;
String data=vars.get(&quot;workOrderId&quot;)+&quot;\n&quot;;
File file = new File(filename);
if (!file.exists()) {
  file.createNewFile();
  fw = new FileWriter(file.getAbsoluteFile(), true);
  bw = new BufferedWriter(fw);
  bw.write(headLine);
  bw.close();
}
fw = new FileWriter(file.getAbsoluteFile(), true);
bw = new BufferedWriter(fw);
bw.write(data);
bw.close();
SampleResult.setIgnore();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WIL_Create_Trouble" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-dynaTrace</stringProp>
                <stringProp name="Header.value">NA=WIL_Create_Trouble;PC=${__samplerName()};VU=-${__threadNum()};ID=${__time()}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Iteration Start Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def ItrStartTime = new Date() 
use(groovy.time.TimeCategory) {
    vars.put(&quot;ItrStartTime&quot;, ItrStartTime.getTime() as String)
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="appointmentEndDate" elementType="Argument">
                <stringProp name="Argument.name">appointmentEndDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P4D,,)}T21:00:00.645Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="appointmentStartDate" elementType="Argument">
                <stringProp name="Argument.name">appointmentStartDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P3D,,)}T21:00:00.645Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dueDate" elementType="Argument">
                <stringProp name="Argument.name">dueDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P22D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">not present</stringProp>
              </elementProp>
              <elementProp name="earlyStartDate" elementType="Argument">
                <stringProp name="Argument.name">earlyStartDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P17D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">not present</stringProp>
              </elementProp>
              <elementProp name="originatingSystemCreateDate" elementType="Argument">
                <stringProp name="Argument.name">originatingSystemCreateDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="requestDate" elementType="Argument">
                <stringProp name="Argument.name">requestDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="counter" elementType="Argument">
                <stringProp name="Argument.name">counter</stringProp>
                <stringProp name="Argument.value">00${__Random(11000,11500,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;S:Envelope&#xd;
	xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
	xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
	&lt;S:Header&#xd;
		xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; /&gt;&#xd;
		&lt;S:Body&#xd;
			xmlns:wsu=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;&#xd;
&#xd;
                             wsu:Id=&quot;id-1797998605&quot;&gt;&#xd;
			&lt;ns5:createWorkOrder&#xd;
				xmlns:ns5=&quot;http://xmlschema.tmi.telus.com/srv/RMO/ProcessMgmt/FieldWorkAssignmentMgmtServiceRequestResponse_v3&quot;&#xd;
				xmlns:ns2=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/Exceptions_v3&quot;&#xd;
				xmlns:ns3=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/EnterpriseCommonTypes_v9&quot;&#xd;
				xmlns:ns4=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/types/ping_v1&quot;&gt;&#xd;
				&lt;ns5:inputHeader&gt;&#xd;
					&lt;systemSourceCd&gt;8517&lt;/systemSourceCd&gt;&#xd;
					&lt;userId&gt;T856407&lt;/userId&gt;&#xd;
					&lt;requestDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/requestDate&gt;&#xd;
				&lt;/ns5:inputHeader&gt;&#xd;
				&lt;ns5:workOrder&gt;&#xd;
					&lt;originatingSystemId&gt;3259&lt;/originatingSystemId&gt;&#xd;
					&lt;originatingSystemWorkOrderId&gt;SFTST1${Random1}${__time()}&lt;/originatingSystemWorkOrderId&gt;&#xd;
					&lt;originatingSystemWorkOrderInternalId&gt;SFTST1${Random2}${__time()}&lt;/originatingSystemWorkOrderInternalId&gt;&#xd;
					&lt;classificationCd&gt;TROUBLE&lt;/classificationCd&gt;&#xd;
					&lt;serviceClassCd&gt;R&lt;/serviceClassCd&gt;&#xd;
					&lt;productCategoryCd&gt;${productCategory}&lt;/productCategoryCd&gt;&#xd;
					&lt;productTechnologyCd&gt;${productTechnology}&lt;/productTechnologyCd&gt;&#xd;
					&lt;workGroupCd&gt;${workGroupCode}&lt;/workGroupCd&gt;&#xd;
					&lt;workOrderActionCd&gt;R&lt;/workOrderActionCd&gt;&#xd;
					&lt;jobTypeCd&gt;${jobType}&lt;/jobTypeCd&gt;&#xd;
					&lt;outofServiceInd&gt;true&lt;/outofServiceInd&gt;&#xd;
					&lt;hostReadyForDispatchInd&gt;false&lt;/hostReadyForDispatchInd&gt;&#xd;
					&lt;overrideInd&gt;false&lt;/overrideInd&gt;&#xd;
					&lt;appointmentStartDate&gt;${__timeShift(yyyy-MM-dd,,P1D,,)}T21:00:00.645Z&lt;/appointmentStartDate&gt;&#xd;
					&lt;appointmentEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}T21:00:00.645Z&lt;/appointmentEndDate&gt;&#xd;
					&lt;estimatedDurationNum&gt;${estimatedDuration}&lt;/estimatedDurationNum&gt;&#xd;
					&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;location&gt;&#xd;
						&lt;locationList&gt;&#xd;
							&lt;typeCode&gt;SERVICE&lt;/typeCode&gt;&#xd;
							&lt;dispatchLocationInd&gt;true&lt;/dispatchLocationInd&gt;&#xd;
							&lt;locationAddress&gt;&#xd;
								&lt;locationId&gt;${LocationId}&lt;/locationId&gt;&#xd;
							&lt;/locationAddress&gt;&#xd;
						&lt;/locationList&gt;&#xd;
					&lt;/location&gt;&#xd;
					&lt;customerName&gt;MANIRAHO JEAN&lt;/customerName&gt;&#xd;
					&lt;customerRatingCd&gt;C&lt;/customerRatingCd&gt;&#xd;
					&lt;customerTypeCd&gt;CUSTOMER&lt;/customerTypeCd&gt;&#xd;
					&lt;contactList&gt;&#xd;
						&lt;name&gt;Jean&lt;/name&gt;&#xd;
						&lt;typeCd&gt;CBR&lt;/typeCd&gt;&#xd;
						&lt;phoneNumber&gt;7807297761&lt;/phoneNumber&gt;&#xd;
						&lt;phoneLocationCd&gt;AUT&lt;/phoneLocationCd&gt;&#xd;
					&lt;/contactList&gt;&#xd;
					&lt;originatingSystemCreateDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&#xd;
&#xd;
                                                          &lt;/originatingSystemCreateDate&gt;&#xd;
					&lt;workOrderAttributeList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;NOTIFICATION_IND&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;false&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/workOrderAttributeList&gt;&#xd;
					&lt;remarkList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;GENERAL&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;FOR_TECHNICIAN&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/remarkList&gt;&#xd;
					&lt;workOrderDetailList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;Activity&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/workOrderDetailList&gt;&#xd;
				&lt;/ns5:workOrder&gt;&#xd;
			&lt;/ns5:createWorkOrder&gt;&#xd;
		&lt;/S:Body&gt;&#xd;
	&lt;/S:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apigw-soap-st.tsl.telus.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap/is01/RMO/ProcessMgmt/FieldWorkAssignmentMgmtService_v3_0_RP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">0</stringProp>
            <stringProp name="HTTPSampler.response_timeout">0</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic QVBQX1JFTkRFWlZPVVM6c29hb3JnaWQ=</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
              <stringProp name="DurationAssertion.duration">0</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.putObject(&apos;count&apos;, 0)</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&apos;authorizationValue&apos;, org.apache.jmeter.protocol.http.util.Base64Encoder.encode(&apos;APP_RENDEZVOUS&apos; + &apos;:&apos; + lr_decrypt))</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="workOrderId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">workOrderId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;workOrderId&gt;([^&quot;]+)&lt;/workOrderId&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2432586">OPEN</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">status OPEN not found</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">25000</stringProp>
            <stringProp name="minimumValue">23000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">Random1</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">27000</stringProp>
            <stringProp name="minimumValue">25000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">Random2</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="exportFile" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.apache.jmeter.services.FileServer;
String Path = FileServer.getFileServer().getBaseDir();
String Seperator = File.separator;
BufferedWriter bw = null;
FileWriter fw = null;
String filename=Path+Seperator+&quot;WorkIDs.txt&quot;;
String headLine=&quot;WOID&quot;+&quot;\n&quot;;
String data=vars.get(&quot;workOrderId&quot;)+&quot;\n&quot;;
File file = new File(filename);
if (!file.exists()) {
  file.createNewFile();
  fw = new FileWriter(file.getAbsoluteFile(), true);
  bw = new BufferedWriter(fw);
  bw.write(headLine);
  bw.close();
}
fw = new FileWriter(file.getAbsoluteFile(), true);
bw = new BufferedWriter(fw);
bw.write(data);
bw.close();
SampleResult.setIgnore();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WIL_Create_Trouble" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-dynaTrace</stringProp>
                <stringProp name="Header.value">NA=WIL_Create_Trouble;PC=${__samplerName()};VU=-${__threadNum()};ID=${__time()}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Iteration Start Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def ItrStartTime = new Date() 
use(groovy.time.TimeCategory) {
    vars.put(&quot;ItrStartTime&quot;, ItrStartTime.getTime() as String)
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="appointmentEndDate" elementType="Argument">
                <stringProp name="Argument.name">appointmentEndDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P6D,,)}T21:00:00.645Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="appointmentStartDate" elementType="Argument">
                <stringProp name="Argument.name">appointmentStartDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P5D,,)}T21:00:00.645Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dueDate" elementType="Argument">
                <stringProp name="Argument.name">dueDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P22D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">not present</stringProp>
              </elementProp>
              <elementProp name="earlyStartDate" elementType="Argument">
                <stringProp name="Argument.name">earlyStartDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P17D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">not present</stringProp>
              </elementProp>
              <elementProp name="originatingSystemCreateDate" elementType="Argument">
                <stringProp name="Argument.name">originatingSystemCreateDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="requestDate" elementType="Argument">
                <stringProp name="Argument.name">requestDate</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="counter" elementType="Argument">
                <stringProp name="Argument.name">counter</stringProp>
                <stringProp name="Argument.value">00${__Random(11000,11500,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;S:Envelope&#xd;
	xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
	xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
	&lt;S:Header&#xd;
		xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; /&gt;&#xd;
		&lt;S:Body&#xd;
			xmlns:wsu=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;&#xd;
&#xd;
                             wsu:Id=&quot;id-1797998605&quot;&gt;&#xd;
			&lt;ns5:createWorkOrder&#xd;
				xmlns:ns5=&quot;http://xmlschema.tmi.telus.com/srv/RMO/ProcessMgmt/FieldWorkAssignmentMgmtServiceRequestResponse_v3&quot;&#xd;
				xmlns:ns2=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/Exceptions_v3&quot;&#xd;
				xmlns:ns3=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/EnterpriseCommonTypes_v9&quot;&#xd;
				xmlns:ns4=&quot;http://xmlschema.tmi.telus.com/xsd/Enterprise/BaseTypes/types/ping_v1&quot;&gt;&#xd;
				&lt;ns5:inputHeader&gt;&#xd;
					&lt;systemSourceCd&gt;8517&lt;/systemSourceCd&gt;&#xd;
					&lt;userId&gt;T856407&lt;/userId&gt;&#xd;
					&lt;requestDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/requestDate&gt;&#xd;
				&lt;/ns5:inputHeader&gt;&#xd;
				&lt;ns5:workOrder&gt;&#xd;
					&lt;originatingSystemId&gt;3259&lt;/originatingSystemId&gt;&#xd;
					&lt;originatingSystemWorkOrderId&gt;SFTST1${Random1}${__time()}&lt;/originatingSystemWorkOrderId&gt;&#xd;
					&lt;originatingSystemWorkOrderInternalId&gt;SFTST1${Random2}${__time()}&lt;/originatingSystemWorkOrderInternalId&gt;&#xd;
					&lt;classificationCd&gt;TROUBLE&lt;/classificationCd&gt;&#xd;
					&lt;serviceClassCd&gt;R&lt;/serviceClassCd&gt;&#xd;
					&lt;productCategoryCd&gt;${productCategory}&lt;/productCategoryCd&gt;&#xd;
					&lt;productTechnologyCd&gt;${productTechnology}&lt;/productTechnologyCd&gt;&#xd;
					&lt;workGroupCd&gt;${workGroupCode}&lt;/workGroupCd&gt;&#xd;
					&lt;workOrderActionCd&gt;R&lt;/workOrderActionCd&gt;&#xd;
					&lt;jobTypeCd&gt;${jobType}&lt;/jobTypeCd&gt;&#xd;
					&lt;outofServiceInd&gt;true&lt;/outofServiceInd&gt;&#xd;
					&lt;hostReadyForDispatchInd&gt;false&lt;/hostReadyForDispatchInd&gt;&#xd;
					&lt;overrideInd&gt;false&lt;/overrideInd&gt;&#xd;
					&lt;appointmentStartDate&gt;${__timeShift(yyyy-MM-dd,,P1D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/appointmentStartDate&gt;&#xd;
					&lt;appointmentEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&lt;/appointmentEndDate&gt;&#xd;
					&lt;estimatedDurationNum&gt;${estimatedDuration}&lt;/estimatedDurationNum&gt;&#xd;
					&lt;estimatedDurationUnitCd&gt;HOURS&lt;/estimatedDurationUnitCd&gt;&#xd;
					&lt;location&gt;&#xd;
						&lt;locationList&gt;&#xd;
							&lt;typeCode&gt;SERVICE&lt;/typeCode&gt;&#xd;
							&lt;dispatchLocationInd&gt;true&lt;/dispatchLocationInd&gt;&#xd;
							&lt;locationAddress&gt;&#xd;
								&lt;locationId&gt;${LocationId}&lt;/locationId&gt;&#xd;
							&lt;/locationAddress&gt;&#xd;
						&lt;/locationList&gt;&#xd;
					&lt;/location&gt;&#xd;
					&lt;customerName&gt;MANIRAHO JEAN&lt;/customerName&gt;&#xd;
					&lt;customerRatingCd&gt;C&lt;/customerRatingCd&gt;&#xd;
					&lt;customerTypeCd&gt;CUSTOMER&lt;/customerTypeCd&gt;&#xd;
					&lt;contactList&gt;&#xd;
						&lt;name&gt;Jean&lt;/name&gt;&#xd;
						&lt;typeCd&gt;CBR&lt;/typeCd&gt;&#xd;
						&lt;phoneNumber&gt;7807297761&lt;/phoneNumber&gt;&#xd;
						&lt;phoneLocationCd&gt;AUT&lt;/phoneLocationCd&gt;&#xd;
					&lt;/contactList&gt;&#xd;
					&lt;originatingSystemCreateDate&gt;${__timeShift(yyyy-MM-dd,,,,)}T${__timeShift(HH:mm:ss.SSS,,,,)}Z&#xd;
&#xd;
                                                          &lt;/originatingSystemCreateDate&gt;&#xd;
					&lt;workOrderAttributeList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;NOTIFICATION_IND&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;false&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/workOrderAttributeList&gt;&#xd;
					&lt;remarkList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;GENERAL&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;FOR_TECHNICIAN&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/remarkList&gt;&#xd;
					&lt;workOrderDetailList&gt;&#xd;
						&lt;typeCode&gt;&#xd;
							&lt;typeCd&gt;Activity&lt;/typeCd&gt;&#xd;
							&lt;descriptionTxt&gt;Perf Test&lt;/descriptionTxt&gt;&#xd;
						&lt;/typeCode&gt;&#xd;
					&lt;/workOrderDetailList&gt;&#xd;
				&lt;/ns5:workOrder&gt;&#xd;
			&lt;/ns5:createWorkOrder&gt;&#xd;
		&lt;/S:Body&gt;&#xd;
	&lt;/S:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apigw-soap-st.tsl.telus.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap/is01/RMO/ProcessMgmt/FieldWorkAssignmentMgmtService_v3_0_RP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">0</stringProp>
            <stringProp name="HTTPSampler.response_timeout">0</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic QVBQX1JFTkRFWlZPVVM6c29hb3JnaWQ=</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
              <stringProp name="DurationAssertion.duration">0</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.putObject(&apos;count&apos;, 0)</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&apos;authorizationValue&apos;, org.apache.jmeter.protocol.http.util.Base64Encoder.encode(&apos;APP_RENDEZVOUS&apos; + &apos;:&apos; + lr_decrypt))</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="workOrderId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">workOrderId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;workOrderId&gt;([^&quot;]+)&lt;/workOrderId&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2432586">OPEN</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">status OPEN not found</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">29000</stringProp>
            <stringProp name="minimumValue">27000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">Random1</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">31000</stringProp>
            <stringProp name="minimumValue">29000</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">Random2</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="exportFile" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.apache.jmeter.services.FileServer;
String Path = FileServer.getFileServer().getBaseDir();
String Seperator = File.separator;
BufferedWriter bw = null;
FileWriter fw = null;
String filename=Path+Seperator+&quot;WorkIDs.txt&quot;;
String headLine=&quot;WOID&quot;+&quot;\n&quot;;
String data=vars.get(&quot;workOrderId&quot;)+&quot;\n&quot;;
File file = new File(filename);
if (!file.exists()) {
  file.createNewFile();
  fw = new FileWriter(file.getAbsoluteFile(), true);
  bw = new BufferedWriter(fw);
  bw.write(headLine);
  bw.close();
}
fw = new FileWriter(file.getAbsoluteFile(), true);
bw = new BufferedWriter(fw);
bw.write(data);
bw.close();
SampleResult.setIgnore();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
